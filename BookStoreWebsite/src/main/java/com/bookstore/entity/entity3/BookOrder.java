package com.bookstore.entity.entity3;
// Generated Feb 4, 2024, 9:52:51 AM by Hibernate Tools 5.6.15.Final

import java.sql.Timestamp;
import java.util.Date;
import java.util.HashSet;
import java.util.List;
import java.util.Objects;
import java.util.Set;

import javax.persistence.CascadeType;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.EnumType;
import javax.persistence.Enumerated;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.NamedQueries;
import javax.persistence.NamedQuery;
import javax.persistence.OneToMany;
import javax.persistence.Table;
import javax.persistence.Transient;

import org.hibernate.annotations.ManyToAny;

import com.bookstore.enumeration.Payment_method;
import com.bookstore.enumeration.StatusBookOrder;

/**
 * BookOrder generated by hbm2java
 */
@Entity
@Table(name = "book_order")
@NamedQueries({
	@NamedQuery(name = "BookOrder.listAll",query = "Select bo from BookOrder bo order by bo.order_date DESC"),
	@NamedQuery(name = "BookOrder.countAll",query = "Select Count(bo) from BookOrder bo")
})
public class BookOrder implements java.io.Serializable {
	@Id
	@GeneratedValue(strategy = GenerationType.IDENTITY)
	@Column(name = "order_id")
	private Integer orderId;

	@ManyToOne(cascade = { CascadeType.PERSIST, CascadeType.REMOVE })
	@JoinColumn(name = "customer_id")
	private Customer customer_id;

	@Column(name = "order_date", nullable = false)
	private Timestamp order_date;
	@Column(name = "shipping_address", nullable = false, length = 256)
	private String shipping_address;
	@Column(name = "recipient_name", nullable = false, length = 30)
	private String recipient_name;
	@Column(name = "recipient_phone", nullable = false, length = 15)
	private String recipient_phone;
	@Enumerated(EnumType.STRING)
	@Column(name = "payment_method", nullable = false, length = 20)
	private Payment_method payment_method;
	@Column(name = "total", nullable = false)
	private double total;
	@Enumerated(EnumType.STRING)
	@Column(name = "status", length = 20, nullable = false)
	private StatusBookOrder status;

	@OneToMany(mappedBy = "bookOrder")
	private List<OrderDetail> detail;

	@Transient
	public int getBookCopies() {
		int total = 0;
		for (OrderDetail orderDetail : detail) {
			total+=orderDetail.getQuantity();
		}
		return total;
	}
	
	
	public BookOrder(Integer orderId, Customer customer_id, Timestamp order_date, String shipping_address,
			String recipient_name, String recipient_phone, Payment_method payment_method, double total,
			StatusBookOrder status) {
		super();
		this.orderId = orderId;
		this.customer_id = customer_id;
		this.order_date = order_date;
		this.shipping_address = shipping_address;
		this.recipient_name = recipient_name;
		this.recipient_phone = recipient_phone;
		this.payment_method = payment_method;
		this.total = total;
		this.status = status;
	}

	public BookOrder() {
		super();
	}

	public Integer getOrderId() {
		return orderId;
	}

	public void setOrderId(Integer orderId) {
		this.orderId = orderId;
	}

	public Customer getCustomer_id() {
		return customer_id;
	}

	public void setCustomer_id(Customer customer_id) {
		this.customer_id = customer_id;
		customer_id.addBookOrder(this);
	}

	public Timestamp getOrder_date() {
		return order_date;
	}

	public void setOrder_date(Timestamp order_date) {
		this.order_date = order_date;
	}

	public String getShipping_address() {
		return shipping_address;
	}

	public void setShipping_address(String shipping_address) {
		this.shipping_address = shipping_address;
	}

	public String getRecipient_name() {
		return recipient_name;
	}

	public void setRecipient_name(String recipient_name) {
		this.recipient_name = recipient_name;
	}

	public String getRecipient_phone() {
		return recipient_phone;
	}

	public void setRecipient_phone(String recipient_phone) {
		this.recipient_phone = recipient_phone;
	}

	public Payment_method getPayment_method() {
		return payment_method;
	}

	public void setPayment_method(Payment_method payment_method) {
		this.payment_method = payment_method;
	}

	public double getTotal() {
		return total;
	}

	public void setTotal(double total) {
		this.total = total;
	}

	public StatusBookOrder getStatus() {
		return status;
	}

	public void setStatus(StatusBookOrder status) {
		this.status = status;
	}

	public void addDetail(OrderDetail detail) {
		this.detail.add(detail);
	}

	public void removeDetail(OrderDetail detail) {
		this.detail.remove(detail);
	}

	public List<OrderDetail> getDetail() {
		return detail;
	}

	public void setDetail(List<OrderDetail> detail) {
		this.detail = detail;
	}

	@Override
	public int hashCode() {
		return Objects.hash(orderId);
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj)
			return true;
		if (obj == null)
			return false;
		if (getClass() != obj.getClass())
			return false;
		BookOrder other = (BookOrder) obj;
		return Objects.equals(orderId, other.orderId);
	}

	@Override
	public String toString() {
		return "BookOrder [orderId=" + orderId + ", customer_id=" + customer_id + ", order_date=" + order_date
				+ ", shipping_address=" + shipping_address + ", recipient_name=" + recipient_name + ", recipient_phone="
				+ recipient_phone + ", payment_method=" + payment_method + ", total=" + total + ", status=" + status
				+ "]";
	}

}
